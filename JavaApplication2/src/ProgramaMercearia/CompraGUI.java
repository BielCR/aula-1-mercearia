package ProgramaMercearia;

import java.time.temporal.TemporalQueries;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author gabri
 */
public class CompraGUI extends javax.swing.JPanel {

    //delcaração de variáveis
    private double totalCompra;
    private Produto produtoSelec;
    private Tabela carrinhoTab;

    //Contrutor
    public CompraGUI() {
        initComponents();

        //initComponents personalizado  
        initPers();
    }

    private void initPers() {
        //Contrutor do modelo da tabela chamando a classe tabela
        this.carrinhoTab = new Tabela(this);
        //definindo a tabela com esse modelo gerado
        tabelaCarrinho.setModel(carrinhoTab);
        //definindo o total da compra com 00
        totalCompra = 0.0;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        codTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nomeTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        quantTF = new javax.swing.JTextField();
        precPTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCarrinho = new javax.swing.JTable();
        removBt = new javax.swing.JButton();
        finalizarBt = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        addBt = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        totalTxt = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Código");

        codTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        codTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        codTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codTFActionPerformed(evt);
            }
        });
        codTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                codTFKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Nome");

        nomeTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nomeTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nomeTF.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Quantidade");

        quantTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        quantTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantTF.setText("1");
        quantTF.setEnabled(false);
        quantTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quantTFKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantTFKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quantTFKeyTyped(evt);
            }
        });

        precPTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        precPTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        precPTF.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Preço Parc.");

        tabelaCarrinho.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tabelaCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaCarrinho);

        removBt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        removBt.setText("Remover");
        removBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removBtActionPerformed(evt);
            }
        });

        finalizarBt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        finalizarBt.setText("Finalizar");
        finalizarBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizarBtActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton3.setText("Estoque");

        addBt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        addBt.setText("Adicionar Produto");
        addBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Valor Total: R$");

        totalTxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalTxt.setText("0,00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(precPTF)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nomeTF)
                            .addComponent(quantTF)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(codTF, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalTxt)
                                .addGap(121, 121, 121)
                                .addComponent(finalizarBt))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(removBt)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addBt)))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(codTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(precPTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(removBt)
                        .addGap(128, 128, 128)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(totalTxt)
                    .addComponent(addBt)
                    .addComponent(finalizarBt))
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void codTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codTFActionPerformed
    private void addItem() {
        if (produtoSelec != null && !quantTF.getText().equals("N/A")) {
            //produto está apto a ser adicionado
            int quant = Integer.parseInt(quantTF.getText());
            //Verificando se possui a quantidade do produto no estoque
            if (quant <= produtoSelec.getQuant()) {
                Produto vendido = new Produto(produtoSelec.getCod(), quant, produtoSelec.getNome(), produtoSelec.getPrec());
                //produtoSelec.setQuant(produtoSelec.getQuant() - quant);
                totalCompra += produtoSelec.getPrec() * quant;
                this.totalTxt.setText(String.format("%.2f", totalCompra));

                //limpeza dos campos de texto
                nomeTF.setText("");
                codTF.setText("");
                quantTF.setText("1");
                precPTF.setText("");
                produtoSelec = null;
                quantTF.setEnabled(false);

                //adicionando na tabela o produto que acabou de ser vendido
                this.carrinhoTab.addProduto(vendido);
                //fazendo o update da tabela
                tabelaCarrinho.updateUI();

            } else {
                JOptionPane.showMessageDialog(null, "Não há produtos sufientes para a venda", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "O produto digitado não existe", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    //função criada pra adicionar um produto quando o botão add for chamado
    private void addBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtActionPerformed

        addItem();

    }//GEN-LAST:event_addBtActionPerformed

    //função pra atualizar a tabela 
    public void atualizaTabela() {
        tabelaCarrinho.updateUI();

        double preco = carrinhoTab.calculaPrec();
        totalTxt.setText(String.format("%.2f", preco));
    }

//mostrar os produtos quando o enter for pressionado no campo de código
    private void codTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codTFKeyTyped
        //verificando se a tecla enter foi pressionada
        if (evt.getKeyChar() == '\n') {
            //verificando se tem algo no campo de código escrito
            if (!codTF.getText().isEmpty()) {
                try {
                    //coletando o código
                    int cod = Integer.parseInt(codTF.getText());
                    //verificando o produto pelo código selecionado
                    produtoSelec = FakeBD.consultaProdutoCod(cod);
                    if (produtoSelec != null) {
                        //preenchendo campos
                        nomeTF.setText(produtoSelec.getNome());
                        precPTF.setText(produtoSelec.getPrec() + "");
                        quantTF.setEnabled(true);
                    } else {
                       //tratando uma possível inexistência dos produtos 
                        JOptionPane.showMessageDialog(null, "Não existe produto com esse código", "Erro", JOptionPane.WARNING_MESSAGE);
                    }

                } catch (NumberFormatException ex) {
                    //tratando um possivel erro de digitação devido ao uso de letras no código
                    JOptionPane.showMessageDialog(null, "O código deve ser um valor numérico", "Erro no código",
                            JOptionPane.WARNING_MESSAGE);

                }

            }
        }
    }//GEN-LAST:event_codTFKeyTyped

    private void quantTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantTFKeyPressed

    }//GEN-LAST:event_quantTFKeyPressed
    //quando a quantidade for digitada
    private void quantTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantTFKeyReleased
        if (!quantTF.getText().isEmpty()) {
            try {
                //observando a quantidade
                int quant = Integer.parseInt(quantTF.getText());
                //definindo o preço parcial
                double precoParcial = produtoSelec.getPrec() * quant;
                //definindo o campo de preço parcial com a formatação de duas casas decimais
                precPTF.setText(String.format("%.2f", precoParcial));
            } catch (NumberFormatException ex) {
                precPTF.setText("N/A");
            }
        } else {
            //Campo da quantidade vazio
            precPTF.setText("N/A");
        }
    }//GEN-LAST:event_quantTFKeyReleased
    //quando o botão remove for ativado
    private void removBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removBtActionPerformed
        //"pegando" a linha selecionada
        int linhaSel = tabelaCarrinho.getSelectedRow();
        
        //verificano se a linha foi selecionada
        if (linhaSel != -1) {
            //confirmando se o usuário quer mesmo remover o produto
            int op = JOptionPane.showConfirmDialog(null, "Deseja remover o produto selecionado?", "Confirma exclusão?",
                    JOptionPane.YES_NO_OPTION);
            
            if (op == JOptionPane.YES_OPTION) {
                //requerindo a senha de segurança ifmg
                String senha = JOptionPane.showInputDialog(null, "Digite a senha de segurança:", "Senha de segurança",
                        JOptionPane.INFORMATION_MESSAGE);
                
                if (senha != null && senha.equalsIgnoreCase("ifmg")) {
                    //removendo produto e atualizando a tabela
                    carrinhoTab.removeProduto(linhaSel);
                    atualizaTabela();
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Senha inválida", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "O produto não foi selecionado", "Erro", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_removBtActionPerformed
 //verificando a quantidade de produto no estque pra realização da venda
    private boolean verQuant() {
      
        Vector<Produto> compras = carrinhoTab.getProdutos();

        for (Produto i : compras) {
            if (i.getQuant() > FakeBD.consultaProdutoCod(i.getCod()).getQuant()) {
                JOptionPane.showMessageDialog(null, "A quantidade do profuto " + i.getNome() + ", não é suficiente para realizar"
                        + " a venda.", "Quantidade inferior", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }
    private void finalizarBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizarBtActionPerformed
        //verificar a quaantidade de produtos
        if (verQuant()) {
            //atualizar o fake db
            Vector<Produto> compras = carrinhoTab.getProdutos();
            for (Produto i : compras) {
                Produto estoque = FakeBD.consultaProdutoCod(i.getCod());
                estoque.setQuant(estoque.getQuant() - i.getQuant());
            }
            //Zerando valor total
            totalCompra = 0.0;
            totalTxt.setText("0,00");

            //remove produtos da tabela
            carrinhoTab.limpaCarrinh();
            tabelaCarrinho.updateUI();

        }


    }//GEN-LAST:event_finalizarBtActionPerformed

    private void quantTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantTFKeyTyped

        if (evt.getKeyChar() == '\n') {
            addItem();
        }
    }//GEN-LAST:event_quantTFKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBt;
    private javax.swing.JTextField codTF;
    private javax.swing.JButton finalizarBt;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomeTF;
    private javax.swing.JTextField precPTF;
    private javax.swing.JTextField quantTF;
    private javax.swing.JButton removBt;
    private javax.swing.JTable tabelaCarrinho;
    private javax.swing.JLabel totalTxt;
    // End of variables declaration//GEN-END:variables
}
